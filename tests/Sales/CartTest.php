<?php

declare(strict_types=1);

namespace khoul\Tests\Sales;

use khoul\Sales\CartItem;
use khoul\Sales\Factory\CartItemFactory;
use khoul\Sales\Product;
use PHPUnit\Framework\TestCase;
use khoul\Sales\Cart;

final class CartTest extends TestCase
{
    private Cart $cart;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cart = new Cart();
    }

    public function test_can_create_a_new_cart() : void
    {
        $this->assertInstanceOf(Cart::class, $this->cart);
    }

    public function test_cart_must_be_unique() : void
    {
        $secondCart = new Cart();
        $this->assertNotEquals($this->cart->getId(), $secondCart->getId());
    }

    public function test_new_cart_must_be_empty_by_default(): void
    {
        $this->assertCount(0, $this->cart->getItems());
    }

    public function test_add_one_product_into_cart(): void
    {
        $this->cart->addItem(CartItemFactory::create([
            'product'=> [
                "sku" => "ABCDEF",
                'name' => 'T-shirt',
                'price' => 10.99
            ],
            'ordered_quantity' => 1
        ]));
        $this->assertCount(1, $this->cart->getItems());

        $item = $this->cart->getItem('ABCDEF');
        $this->assertEquals('ABCDEF', $item->getProduct()->getSku());
        $this->assertEquals(1, $item->getOrderedQuantity());
    }

    public function test_add_two_products_into_cart(): void
{
    $items = [
        [
            'product'=> [
                "sku" => "ABCDEF",
                'name' => 'T-shirt',
                'price' => 10.99
            ],
            'ordered_quantity' => 1
        ],
        [
            'product'=> [
                "sku" => "GHIJKL",
                'name' => 'Pent',
                'price' => 19.99
            ],
            'ordered_quantity' => 5
        ]
    ];

    foreach($items as $item){
        $this->cart->addItem(CartItemFactory::create($item));
    }
    $this->assertCount(2, $this->cart->getItems());

    $item = $this->cart->getItem('GHIJKL');
    $this->assertEquals('GHIJKL', $item->getProduct()->getSku());
    $this->assertEquals(5, $item->getOrderedQuantity());
}

    public function test_add_one_products_many_times_into_cart(): void
    {
        $items = [
            [
                'product'=> [
                    "sku" => "ABCDEF",
                    'name' => 'T-shirt',
                    'price' => 10.99
                ],
                'ordered_quantity' => 1
            ],
            [
                'product'=> [
                    "sku" => "ABCDEF",
                    'name' => 'T-shirt',
                    'price' => 10.99
                ],
                'ordered_quantity' => 5
            ]
        ];

        foreach($items as $item){
            $this->cart->addItem(CartItemFactory::create($item));
        }
        $this->assertCount(1, $this->cart->getItems());

        $item = $this->cart->getItem('ABCDEF');
        $this->assertEquals('ABCDEF', $item->getProduct()->getSku());
        $this->assertEquals(6, $item->getOrderedQuantity());
    }
    public function test_add_one_product_into_cart_with_zero_quantity(): void
    {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessage('Cart item with negative quantity is not allowed. [0] given.');

        $this->cart->addItem(CartItemFactory::create([
            'product'=> [
                "sku" => "ABCDEF",
                'name' => 'T-shirt',
                'price' => 10.99
            ],
            'ordered_quantity' => 0
        ]));
    }

    public function test_add_one_product_into_cart_with_negative_quantity(): void
    {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessage('Cart item with negative quantity is not allowed. [-1] given.');

        $this->cart->addItem(CartItemFactory::create([
            'product'=> [
                "sku" => "ABCDEF",
                'name' => 'T-shirt',
                'price' => 10.99
            ],
            'ordered_quantity' => -1
        ]));
    }
}